name: Deploy on K8s

on:
  workflow_run:
    workflows: ["Build Docker Image"]
    types:
      - completed

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  kind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
      - name: Testing
        run: |
          kubectl wait nodes --for condition=Ready --all
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.gh_tok }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Deploy Application
        run: |
          kubectl create deployment rps-deployment --image=${{ env.DOCKER_IMAGE }}
          kubectl wait pods --for condition=Ready --timeout=120s --all
          kubectl expose deployment/rps-deployment --type=NodePort --port 8080

      - name: Check pod logs
        if: failure()
        run: |
          export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
          kubectl logs $POD_NAME

      - name: Check Kubernetes events
        if: failure()
        run: |
          kubectl get events --sort-by='.metadata.creationTimestamp'

      - name: Test Deployment
        run: |
          export NODE_PORT=$(kubectl get services/rps-deployment -o go-template='{{(index .spec.ports 0).nodePort}}')
          echo NODE_PORT=${NODE_PORT}
          kubectl describe services/rps-deployment
          export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
          kubectl exec -ti $POD_NAME -- curl localhost:8080/version

      - name: Run Unit Tests
        run: pytest --cov=src --cov-report=xml tests/functional/

      - name: Cleanup
        if: always()
        run: |
          kind delete cluster --name test-cd