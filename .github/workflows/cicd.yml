name: Build
run-name: Build image, deploy on k8s and run deploy tests
on: ["pull_request"]
env:
  IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/app:${{ github.sha }}
  USERNAME: ${{ github.actor }}
  PASSWORD: ${{ secrets.GHCR_TOKEN }}
jobs:
  BuildAndPushDockerImage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_REPO }}
  DeployOnK8s:
    runs-on: ubuntu-latest
    # Depends on previous job's Docker image
    needs: [BuildAndPushDockerImage]
    steps:
      - uses: actions/checkout@v3
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
      - name: Testing
        run: |
          kubectl wait nodes --for condition=Ready --all
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
      - name: Deploy Application
        run: |
          kubectl create secret docker-registry ghcr-token \
          --docker-username=${{ env.USERNAME }} \
          --docker-password=${{ env.PASSWORD }} \
          --docker-server=ghcr.io
          envsubst < k8s/app-deploy.yaml | kubectl apply -f -
          kubectl wait pods --for condition=Ready --timeout=90s --all
          kubectl expose deployment/rps-deployment --type=NodePort --port 5000 --target-port 5000
      - name: Test Deployment
        run: |
          kubectl port-forward service/rps-deployment 5000:5000 > /dev/null &
          pip install -r requirements.txt --upgrade pip
          PYTHONPATH="${PYTHONPATH}:src" pytest tests/integration
      - name: Cleanup
        if: always()
        run: |
          kind delete cluster --name test-cd
