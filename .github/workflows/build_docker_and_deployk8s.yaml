name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v2

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Log into ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.gh_tok }}

      - name: Build and Push Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Set up Kubernetes cluster with kind
        uses: helm/kind-action@v1.4.0

      - name: Create Kubernetes Secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.gh_tok }}

      - name: Apply Kubernetes Deployment
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: rps-deployment
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: rps-app
            template:
              metadata:
                labels:
                  app: rps-app
              spec:
                containers:
                - name: flexport-devx-takehome
                  image: ghcr.io/${{ github.repository }}:${{ github.sha }}
                imagePullSecrets:
                - name: ghcr-secret
          EOF
  functional_tests:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v2

      - name: Set up Kubernetes cluster with kind
        uses: helm/kind-action@v1.4.0

      - name: Wait for Deployment to be ready
        run: kubectl wait --timeout=180s --for=condition=Available deployment/rps-deployment

      - name: Get Pod name
        id: get_pod
        run: echo "POD_NAME=$(kubectl get pod -l app=rps-app -o jsonpath='{.items[0].metadata.name}')" >> $GITHUB_ENV

      - name: Run Functional Tests
        run: kubectl exec $POD_NAME --pytest --cov=src --cov-report=xml tests/unit/